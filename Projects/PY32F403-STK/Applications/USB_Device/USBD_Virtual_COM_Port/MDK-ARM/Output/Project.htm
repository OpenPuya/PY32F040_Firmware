<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Fri Jan 12 21:50:26 2024
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC1_2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[38]">ADC3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from py32f4xx_it.o(.text.BusFault_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[20]">CAN_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel1_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel4_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel5_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel6_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel7_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[41]">DMA2_Channel1_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel4_5_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from py32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[39]">ESMC_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from py32f4xx_it.o(.text.HardFault_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from py32f4xx_it.o(.text.MemManage_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from py32f4xx_it.o(.text.NMI_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from py32f4xx_it.o(.text.PendSV_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[11]">RCC_CTC_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3a]">SDIO_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from py32f4xx_it.o(.text.SVC_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from py32f4xx_it.o(.text.SysTick_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_py32f4xx.o(.text.SystemInit) referenced from startup_py32f403xx.o(.text)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3f]">TIM6_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3d]">USART4_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[3e]">USART5_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[1f]">USB_IRQHandler</a> from py32f4xx_it.o(.text.USB_IRQHandler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from py32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_py32f403xx.o(.text) referenced from startup_py32f403xx.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f403xx.o(.text)
 <LI><a href="#[48]">cdc_acm_class_interface_request_handler</a> from usbd_cdc.o(.text.cdc_acm_class_interface_request_handler) referenced 2 times from usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
 <LI><a href="#[49]">cdc_notify_handler</a> from usbd_cdc.o(.text.cdc_notify_handler) referenced 2 times from usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
 <LI><a href="#[45]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">usbd_cdc_acm_bulk_in</a> from usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_in) referenced 2 times from usbd_cdc_if.o(.data.cdc_in_ep)
 <LI><a href="#[1]">usbd_cdc_acm_bulk_out</a> from usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_out) referenced 2 times from usbd_cdc_if.o(.data.cdc_out_ep)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ESMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f403xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send_with_dtr_test
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, py32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[5a]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, py32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[52]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, py32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>HAL_InitTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, py32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[55]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, py32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, py32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[53]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, py32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[58]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, py32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 920 bytes, Stack size 32 bytes, py32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, py32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_py32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>USBD_IRQHandler</STRONG> (Thumb, 762 bytes, Stack size 48 bytes, usb_dc_py32.o(.text.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>USB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_IRQHandler &rArr; USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f403xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>cdc_acm_data_send_with_dtr_test</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_cdc_if.o(.text.cdc_acm_data_send_with_dtr_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cdc_acm_data_send_with_dtr_test &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>cdc_acm_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.cdc_acm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cdc_acm_init &rArr; usbd_initialize &rArr; usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_endpoint
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_interface
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_init_intf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send_with_dtr_test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6f]"></a>usb_dc_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_dc_py32.o(.text.usb_dc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
</UL>

<P><STRONG><a name="[70]"></a>usb_dc_low_level_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usb_dc_low_level_init))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[6c]"></a>usbd_add_endpoint</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_add_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[6b]"></a>usbd_add_interface</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_add_interface))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[0]"></a>usbd_cdc_acm_bulk_in</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_cdc_acm_bulk_in &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.cdc_in_ep)
</UL>
<P><STRONG><a name="[1]"></a>usbd_cdc_acm_bulk_out</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_cdc_acm_bulk_out &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.cdc_out_ep)
</UL>
<P><STRONG><a name="[65]"></a>usbd_cdc_acm_get_line_coding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_get_line_coding))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[6a]"></a>usbd_cdc_acm_init_intf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_init_intf))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[63]"></a>usbd_cdc_acm_set_dtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.usbd_cdc_acm_set_dtr))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[62]"></a>usbd_cdc_acm_set_line_coding</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_set_line_coding))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[64]"></a>usbd_cdc_acm_set_rts</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_set_rts))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[72]"></a>usbd_configure_done_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.usbd_configure_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_configure_done_callback &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[69]"></a>usbd_desc_register</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_desc_register))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[79]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_ep_clear_stall))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[78]"></a>usbd_ep_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_ep_close))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[77]"></a>usbd_ep_is_stalled</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_ep_is_stalled))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[76]"></a>usbd_ep_open</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, usb_dc_py32.o(.text.usbd_ep_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_open
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[73]"></a>usbd_ep_set_stall</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_ep_set_stall))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[71]"></a>usbd_ep_start_read</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usb_dc_py32.o(.text.usbd_ep_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_bulk_out
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configure_done_callback
</UL>

<P><STRONG><a name="[67]"></a>usbd_ep_start_write</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, usb_dc_py32.o(.text.usbd_ep_start_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_bulk_in
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send_with_dtr_test
</UL>

<P><STRONG><a name="[5f]"></a>usbd_event_ep0_setup_complete_handler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_event_ep0_setup_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>usbd_event_ep_in_complete_handler</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_event_ep_in_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_event_ep_in_complete_handler &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>usbd_event_ep_out_complete_handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_event_ep_out_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>usbd_event_reset_handler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_event_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_event_reset_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>usbd_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_initialize &rArr; usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[75]"></a>usbd_set_address</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[88]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[74]"></a>usbd_setup_request_handler</STRONG> (Thumb, 1136 bytes, Stack size 48 bytes, usbd_core.o(.text.usbd_setup_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_is_stalled
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configure_done_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[48]"></a>cdc_acm_class_interface_request_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_cdc.o(.text.cdc_acm_class_interface_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cdc_acm_class_interface_request_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_get_line_coding
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_set_rts
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_set_line_coding
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_set_dtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
</UL>
<P><STRONG><a name="[49]"></a>cdc_notify_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(.text.cdc_notify_handler))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
